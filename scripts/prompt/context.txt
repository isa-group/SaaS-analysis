Fig. 1. Partial view of Zoom’s pricing

Although there is not yet a commonly accepted model that represents the pricing of SaaS, most providers share similar structures with multiple common elements. In this context, a pricing performs as a container of features, which relies on plans and add-ons to group them. The main difference between the latter two is that while users can only subscribe to one single plan, add-ons do not share such restriction, allowing users to subscribe to as many as they want. Within this model, a customer interacts with the SaaS by establishing a subscription, through which he commits to pay a periodic fee (aka usage tariff [14]) to gain the ability to access and leverage the functionality and information provided by the SaaS in the terms and limits set out by the chosen plan or/and set of add-ons.
To better explain the upcoming concepts, we will use Zoom as a running example, a cloud-based video conferencing service that enables users to virtually meet with others - either by video, audio-only or both, while conducting live chats - allowing users to record the sessions to view later. An adapted view of its pricing is represented in Fig.1, and contains a subset of features from the original one.1 In general, the pricing consists of three plans -which manage 10 features- and two add-ons -that manage one feature each-.

Fig. 2. Pricing4SaaS/Yaml4SaaS model

The Pricing4SaaS Model
Following an in-depth analysis of the pricing of thirteen real-world SaaS [7], we devised a common model that is able to represent any pricing of such systems in a unified way: Pricing4SaaS (see Fig. 2), generalizing solutions like Pricing4API [5].
Guided by the pricing model, within Pricing4SaaS, the user interacts with the pricing -encompassing plans, add-ons, or a combination thereof- through a subscription, which acts as a pivotal component in regulating the user’s access to the IS functionalities according to the contract.
Both pricing components consist of features, which conform the minimum unit within the dissection of the structure. Depending on their contribution to the system, we have non-exhaustively devised up to eight different types, namely:
	–  Domain: provide functionality related to the domain of the system, allowing to perform new operations or using exclusive services; e.g. voting in meetings, which allows a meeting organizer to create single or multiple-choice survey questions within his meetings (Fig. 1). This type of feature is usually the most frequent within a pricing. 
	–  Integration: permit users to interact with the system through its API, or to use functionalities from external third-party software within the system; e.g. LTI Integration on Zoom allows the addition of a meeting to any course activity created with a supported learning management system (LMS), such as Blackboard. 
	–  Automation: they permit to configure the system in order to perform some actions autonomously or track thresholds and notify the user if anyone is exceeded. It also includes any task performed by a bot or AI, such as predic- tions, generative AI, etc; e.g. Zoom’s automated subtitles. 
	–  Management: are focused on team leaders and system administrators. They ease the supervision, organization and guidance of projects, and allow the configuration of accounts and organization-based restrictions and rules; e.g Zoom’s Administrator portal, which offers administrators a centralized tool to manage company’s users for simplified billing and to declare advanced user management settings.
	–  Information: allow to see, use, visualize or extract additional data from the features described above; e.g. Zoom’s reports, which provides owners and account managers with a variety of account, meetings and webinars statistics. 
	–  Guarantee: technical commitments of the company that operates the system towards the users. For example, Zoom assures an end-to-end encryption for meetings. 
	–  Support: expose the granularity of customer support offered within the plans; e.g. Zoom provides chat support for PRO and BUSINESS plans. 
	–  Payment: specify payment conditions and possibilities. The model also allows to determine a second-level classification for features, that will be considered as common or specific whether they provide the same functionality across all plans or not, e.g automated subtitles in Zoom is common. Such classification can be used to assess the level of privatization of a SaaS. Finally, features, add-ons and plans can be limited by usage limits, which are also present in APIs [5]. Depending on the limitation they impose, we have classified them into four groups: 
	–  Renewable: their limit is reset after a period of time, could be a day, week, month... For example, Zoom impose a max assistants per meeting limit on its online meetings feature. 
	–  Non-renewable: define a static limit towards which the user approaches, and that will remain until the end of the subscription; e.g Zoom maximum cloud storage capacity for recordings. 
	–  Response-driven: represent a limit where user consumes more or less of his quota depending on the computational cost of the SaaS associated with the request. As an illustration, the usage of OpenAI’s Large Language Models (LLMs) are constrained by the number of tokens acquired. The consumption of tokens varies depending on the length of the model’s response to a prompt. 
	–  Time-driven: with this type the quota is consumed by usage time, and is normally combined with a non-renewable limit; e.g Zoom’s max time per meeting. However, many SaaS offer add-ons to punctually extent these limits (similar 
to an API overage fee) [6]. For example, in Zoom, the maximum number of participants in a meeting can be extended by adding the huge meetings add-on to the subscription, which allows up to 1000 participants in a meeting.
As a final note, Pricing4SaaS distinguishes between public and private plans. On the one hand, we define a private plan as the one created after contacting the SaaS sales department to meet a client’s specific needs, with negotiated costs (private), e.g Zoom Enterprise. On the other hand, public plans are available for every user, and have a fixed tariff.

Figure 1.1: Excerpt of GitHub’s pricing
Figure 1.2: GitHub’s add-ons
Figure 1.3: Excerpt of Papaya Global’s pricing

SaaS in a nutshell
Although there is not yet a commonly accepted model to represent the pricing of commercial SaaS, most providers share similar structures with multiple common elements. In this section we present our perspective inspired by [2].
Structure
In a nutshell, pricing is a structure of feature containers, called plans and add-ons. The main difference between the two types of containers is that while plans are mutually exclusive, meaning users can only subscribe to one single plan, add-ons do not share this restriction, thus users can get as many as they want.
Plan-based-pricing
Comprising by both plans, acting as the primary feature aggregation element, and add-ons, which extend the set of features and conditions offered and require the subscription to a plan.
An example of this type of pricing is GitHub (see Figures 1.1 and 1.2), which is composed by three plans (Free, Team and Enterprise), and four add-ons. As can be seen, each plan defines a set of features that are available for the user, and stipulate various usage conditions, including: limits, billing options, SLA coverage... while add-ons permit to include exclusive features in a plan (e.g. GitHub Copilot), or extend the defined usage limit by paying the equivalent of an overage fee in APIs pricing [3] (e.g. Codespaces).
Add-on-based pricing
SaaS products employing this structure do not define multiple plans with predefined feature sets. Instead, they present a range of add-ons, also referred to as “feature packages” within this pricing framework, that users can combine to shape a customized plan tailored to their specific needs. Figure 1.3 shows an example of this type, which is the pricing of Papaya Global, a cloud- based solution that helps multinationals in managing global payroll, cross-border payments and contractors.
Components
The conditions and benefits included within a pricing are regulated by a set of elements that are common to all of them:
• Features: represent distinctive characteristics whose presence/absence may guide a user’s decision towards a particular subscription, which may be a plan, or a set of add-ons. This concept encompasses definitions such as [1] for SPL and [4] for feature toggles, as well as support and service level guarantees.
• Usage Tariff: refers to the price for using a set of features offered by a SaaS according to the conditions set out in the plan. This fee may vary depending on factors such as the number features included, the limits imposed to them, the set of guarantees covered by SLA, and so on.
For instance, GitHub’s pricing structure makes 83% of its features accessible through the Free plan, which comes at no cost. However, this plan imposes strict restrictions on the majority of features; for instance, 50% of the included features are unavailable for use within private repositories, there are also limitations with low thresholds on the usage of Codespaces, GitHub Actions, and GitHub Packages. Exceeding the limits set for Codespaces incurs an additional cost of $0.18 per hour of computing and $0.07 per storage used. It is important to remark that these costs and limits extensions are offered by the respective add-on rather than the plan itself.
• Usage limits: are quotas imposed over the features and plans to limit their scope. De- pending on the type of limitation they can be: renewable, non-renewable, response-driven or time-driven.
• SaaS documentation: to understand all the aspects related to pricing, the information shown in the tables could be not enough; it is necessary to consider the information avail- able associated with the pricing elements, which may be more or less close to the table. For example, in GitHub, Copilot’s add-on do offer several contracting options, regarding if it is going to be used in a corporate or an individual environment. However, these options are not listed in the main page1.
To interact with a pricing, a user performs a subscription, which is a type of agreement whereby a customer pays a periodic fee to gain the ability to access and leverage the functionality and information provided by the SaaS. Typically, the client must also accept the terms of use, including those related to payment.

Yaml4SaaS
Yaml4SaaS emerges as a pragmatic application of the Pricing4SaaS model (Figure 2), aligning with the overarching objective of formalizing and structuring pricing information for SaaS platforms. Building upon the foundational principles articulated in Pricing4SaaS, Yaml4SaaS embodies a simplified and versatile YAML-based syntax designed for serializing comprehensive details about SaaS offerings. The essence of Yaml4SaaS lies in its capacity to encapsulate pricing plans, add-ons, features and usage limits within a concise and human-readable YAML format.
In this section, we are going to navigate through its components using a part view of GitHub’s pricing serialization as our running example.
Starting with the top-level placeholder, we can describe basic information about the pricing, features, usage limits, plans and add-ons.
Features enumerate all the functionalities encompassed in the pricing, classifying them into the types defined in Pricing4SaaS:
• INFORMATION • INTEGRATION • DOMAIN • AUTOMATION • MANAGEMENT • GUARANTEE • SUPPORT • PAYMENT
detailing each feature’s description, valueType (BOOLEAN, TEXT), and defaultValue, whose data type has to be aligned with the valueType defined. Notably, features do not handle NU- MERIC values, which are reserved for limits. In addition, depending on each type of feature, the syntax extends expressiveness for each feature type with additional fields:
For integration features, an IntegrationType (enum defined in Figure 2) can be specified through the integrationType field. If its value is WEB SAAS, a list of SaaS pricing URLs can be included. 
Automation features do also allow to assign theirselves an AutomationType. 
For guarantee features can reference the corresponding documentation section describing them via the docURL field. 
Payment features differ from others, requiring values as a list of PaymentTypes (also detailed in Figure 2) for standardization. Similar to features, UsageLimits expounds on limitations affecting plans, add-ons, or features in the pricing, tagging each with the corresponding Pricing4SaaS type: • NON RENEWABLE • RENEWABLE• RESPONSE DRIVEN • TIME DRIVEN For each limit, similar to features, a description, valueType (BOOLEAN, TEXT, NUMERIC), and defaultValue are provided, accompanied by additional fields such as unit or linkedFeatures. The latter must be a list of previously described features affected by the limitation. The plans section provides comprehensive details about the distinct pricing plans offered within the SaaS. Each plan is identified by a unique name, allowing for easy reference and differentiation. For each one, essential information is specified, including a brief description, the monthlyPrice, the annualPrice (if different from monthly) and the unit affected by them, typically expressed as ”user/month”. In the features and usageLimits subsections of each plan, only those requiring a modification in their defaultValue should be explicitly listed. For those not mentioned, the defaultValue is understood to be equivalent to the value. 
Within the addOns section, the focus is on delineating the specific details of additional offerings beyond the core plans. Each add-on is characterized by its unique features and usage limits, which have to be listed in the structure established in the features and usageLimits sections, but not included on plans. Similar to the approach taken in the previous section of the file, only those features or usageLimits necessitating an alteration in the defaultValue are explicitly outlined. As an extra field, add-ons also allow to extent a usageLimit, as can be seen in Figure 2. This is extremely powerful for modeling overage cost to some limits.
In conclusion, Yaml4SaaS stands as a practical implementation of the Pricing4SaaS model, providing a YAML-based syntax to formalize SaaS pricing structures in a human-readable format that enhances clarity and simplicity.

Considerations for the methodology 
In order to reduce the error in our approach, we added a few extra rules to the process:
Features usually have different values among each plan (no matter if they are boolean, numerical or textual), so they will be not be counted for each plan in the reports, but just once. 
Management tools (such as Jira), can sometimes create ambiguity between ”Domain” and ”Management” features. In such situations, we categorize features as ”domain” if they add functionality to the system’s domain, while those aiding in designing organizational hierarchies are classified as ”Management”. For example, the ability of configuring separate roles between users to encapsulate permissions is considered a “Management” feature. However, assign specific tasks to a team member, in this context, should be considered as a ”Domain” feature. 
It is important to remark that this study classifies the features included in the pricing structure of each system. If some core characteristics are not listed inside the pricing, they will not be counted. For example, 2019’s Overleaf do not have features listed inside its free plan specification, but, in reality, it offers many functionalities. 